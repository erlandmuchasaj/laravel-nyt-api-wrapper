{
  "swagger": "2.0",
  "info": {
    "description": "For this sample to work, you need the `username/password` that will be provided to you by the system administrator. \n\r\n\r In order to be able to utilize the parking payment endpoints, you need 2 things. \n\r 1. A **xscrf** token, which can be generated from `/auth/sanctum` and add it to header as `X-XSRF-TOKEN: {xsrf-token}`. \n\r 2. An **authorization** token which can be retrieved from `/api/login/provider` and add it also to header as `Authorize: Bearer {token}`. ",
    "version": "1.0.0",
    "title": "Swagger NYT - OpenAPI 1.0",
    "termsOfService": "https://developer.nytimes.com/terms",
    "contact": {
      "name": "NYT",
      "url": "https://developer.nytimes.com/",
      "email": "code@nytimes.com"
    },
    "license": {
      "name": "License (MIT)",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "basePath": "/",
  "schemes": [
    "https",
    "http"
  ],
  "tags": [
    {
      "name": "auth",
      "description": "Here you need to obtain the Cookie `X-SCRF-TOKEN` and `Authorization: Bearer` token in order to proceed with the parking payment."
    },
    {
      "name": "zones",
      "description": "Get the list of all available parking zones where the user can park."
    },
    {
      "name": "user",
      "description": "Create new user to Tirana parking and transfer credit to him."
    },
    {
      "name": "transfers",
      "description": "Transferring credits from a third party **provider** to an active user inside **NYT**."
    },
    {
      "name": "ipn",
      "description": "Notify **NYT** when a new parking is made using third party platforms or applications.\n\r This is intended for platform that already have their system which is being used by users.\n\r And we use it to synchronise parking payments to one platform **NYT**. \n\r All parking payment coming from this api will be marked as: `notification`."
    },
    {
      "name": "parking",
      "description": "These endpoints are used to create a valid parking payment to Tirana parking through API.\nThe parking was seperated in **2** steps but for easy of use we re-formatted and simplified the process to only one step.\n\n You just need tou make a call to `/api/parking-reservations/{slug}/parkings` to create a parking payment.\n This will puts the request on `completed` state and return `201` if everything is **OK**.\nOnly at this point (*After we return **SUCCESS** response*) you collect the money from the user."
    }
  ],
  "paths": {
    "/sanctum/csrf-cookie": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "Get `CSRF` cookie token",
        "description": "To authenticate your platform to our webservice, your app's `login` page should first make a request to the `/sanctum/csrf-cookie` endpoint to initialize **CSRF** protection for the application.\nDuring this request, The application will set an XSRF-TOKEN cookie containing the current CSRF token. \n\r This token should then be passed in an `X-XSRF-TOKEN` header on subsequent requests",
        "operationId": "getCsrfCookieToken",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/api/login/provider": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Login user",
        "description": "Before logging in the user you need to make a call to `/sanctum/csrf-cookie` to get the token and append on Header as `X-SCRF-TOKEN`, *see tab above*. \n\nAfter you are successfully login, you need to get the token from user response *(auth.token)* and append on all consecutive request as `Authorization: Bearer {token}`",
        "operationId": "authenticateUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "xsrf-token": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Login Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LogInRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Authed User",
            "schema": {
              "$ref": "#/definitions/Auth"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "419": {
            "description": "CSRF token mismatch."
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Service Unavailable – We’re temporarily offline for maintenance. Please try again later."
          },
          "default": {
            "description": "Unexpected error"
          }
        }
      }
    },
    "/api/logout": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Logout user",
        "description": "Logout current authenticated provider and destroy current active token.",
        "operationId": "logoutAuthenticatedUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "Bearer": [],
            "xsrf-token": []
          }
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Authed user removed"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "419": {
            "description": "CSRF token mismatch."
          },
          "default": {
            "description": "Unexpected error"
          }
        }
      }
    },
    "/api/tokens": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Remove tokens",
        "description": "Remove all existing active token for the logged in provider. The current token will still be valid.",
        "operationId": "removeAuthTokens",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "Bearer": [],
            "xsrf-token": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Authenticated user password",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "password": {
                  "type": "string",
                  "format": "password"
                }
              },
              "required": [
                "password"
              ]
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully."
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "419": {
            "description": "CSRF token mismatch."
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "default": {
            "description": "Unexpected error"
          }
        }
      }
    },
    "/api/change-password": {
      "put": {
        "tags": [
          "auth"
        ],
        "summary": "Update password",
        "description": "Update authenticated user password.",
        "operationId": "changeAuthUserPassword",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "Bearer": [],
            "xsrf-token": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Register Request",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "current_password": {
                  "type": "string",
                  "format": "password"
                },
                "password": {
                  "type": "string",
                  "format": "password"
                },
                "password_confirmation": {
                  "type": "string",
                  "format": "password"
                }
              },
              "required": [
                "current_password",
                "password",
                "password_confirmation"
              ]
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Password changed.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "419": {
            "description": "CSRF token mismatch."
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "default": {
            "description": "Unexpected error"
          }
        }
      }
    },
    "/api/parking-reservations/{slug}/transfer": {
      "post": {
        "tags": [
          "transfers"
        ],
        "summary": "Transfer credit to user",
        "description": "With this endpoint you can directly transfer credit to an existing user in **Tirana parking**.\n When transferring credits from a provider to our platform, the provider **MUST** request user `phone number` or `email` that is connected to **TP** (*`NYT` app*) than they can proceed with transferring of the credits.\nThis **SHOULD** be done in order to avoid any mistake, because if the user has a different phone number connected to **Provider**, and different one connected to **NYT** then the credits might not be transferred to the correct user.\nTherefor we suggest to display the user a modal to confirm his/her data before submitting the form.",
        "operationId": "parkingPaymentTransferCredit",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "description": "The provider `slug` that was provided to you by the System administrator on your email.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Transfer credit payload",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransferCreditRQ"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "string",
              "example": "Transfer completed."
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Unauthenticated"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "When provider is not active."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "When user or provider is not found."
                }
              }
            }
          },
          "406": {
            "description": "NOT ACCEPTABLE",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "This error occur when the user you are trying to transfer credit to is not active."
                }
              }
            }
          },
          "422": {
            "description": "Validation errors",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }
        },
        "security": [
          {
            "Bearer": [],
            "xsrf-token": []
          }
        ]
      }
    },
    "/api/parking-reservations/{slug}/check-user": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Check if user exists.",
        "description": "With this endpoint you can check if a user with a specific `phone_number` or `email` address already exists in our platform.\nThis is usefully if you are trying to determine if a user already exists before you make any transfer or try to create new user.\nPlease **NOTE** that you need to provide email or phone number at a time and not both simultaneously.\n*You can leave one of them empty*.",
        "operationId": "parkingPaymentCheckUserIfExists",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "description": "The provider `slug` that was provided to you by the System administrator on your email.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "check user existence payload",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CheckUserRQ"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User exists",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Unauthenticated"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "When provider is not active."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "When user or provider is not found."
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "This error occur when the user you are trying to transfer credit to is not active."
                }
              }
            }
          },
          "422": {
            "description": "Validation errors",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }
        },
        "security": [
          {
            "Bearer": [],
            "xsrf-token": []
          }
        ]
      }
    },
    "/api/parking-reservations/{slug}/create": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create user from external provider",
        "description": "With this endpoint you can create a new user to our system if it does not already exists.\n If user already exists in our platform, it will throw a validation error.",
        "operationId": "parkingPaymentCreateUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "description": "The provider `slug` that was provided to you by the System administrator on your email.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Create user payload",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUserRQ"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Bad Request"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Unauthenticated"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "When provider is not active."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "When user or provider is not found."
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "This error occur when the user you are trying to transfer credit to is not active."
                }
              }
            }
          },
          "419": {
            "description": "CSRF token mismatch.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "This error occur when SCRF token is not set."
                }
              }
            }
          },
          "422": {
            "description": "Validation errors",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "default": {
            "description": "Unexpected error"
          }
        },
        "security": [
          {
            "Bearer": [],
            "xsrf-token": []
          }
        ]
      }
    },
    "/api/parking-reservations/{slug}/create-and-transfer": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create user and transfer credit",
        "description": "With this endpoint you can create a new user to our system if it does not already exists and transfer credit.\n If user already exists in our platform, it will throw a validation error. \n\r In such case use `/transfer` endpoint to only transfer credit to an existing user.",
        "operationId": "parkingPaymentCreateAndTransferCredit",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "description": "The provider `slug` that was provided to you by the System administrator on your email.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Create user and transfer credit payload",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateAndTransferCreditRQ"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "string",
              "example": "Transfer completed."
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Unauthenticated"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "When provider is not active."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "When user or provider is not found."
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "This error occur when the user you are trying to transfer credit to is not active."
                }
              }
            }
          },
          "422": {
            "description": "Validation errors",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }
        },
        "security": [
          {
            "Bearer": [],
            "xsrf-token": []
          }
        ]
      }
    },
    "/api/parking-reservations/{slug}/ipn": {
      "post": {
        "tags": [
          "ipn"
        ],
        "summary": "Instant Parking Notification (IPN)",
        "description": "With this request, you (Provider) notify **NYT** when a new parking payment is made using your platform. \n\r This is purely for synchronisation purposes, in order to avoid `patrol` users to check multiple platform but rather just one. \n\r All IPN parking payments are marked as `notification`.",
        "operationId": "parkingPaymentInstantNotification",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "description": "The provider slug that was provided to you by the System administrator on your email.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Reservation parking body payload. `transaction_id` and `data` are optional but should be present on the payload.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NotifyParkingRQ"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "string",
              "example": "Parking payment notification handled."
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Unauthenticated"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You do not have permission to do that."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "When zone or provider, provided is wrong."
                }
              }
            }
          },
          "422": {
            "description": "Validation errors",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }
        },
        "security": [
          {
            "Bearer": [],
            "xsrf-token": []
          }
        ]
      }
    },
    "/api/parking-reservations/{slug}/parkings": {
      "post": {
        "tags": [
          "parking"
        ],
        "summary": "Create a parking payment",
        "description": "With this request you create a new parking payment for the user vehicle. \n\r This will put the payment as `COMPLETED`.",
        "operationId": "createParkingPayment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "description": "The provider slug that was provided to you by the System administrator on your email.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Reservation parking body payload. `transaction_id` is optional but should be present on the payload.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HoldParkingRQ"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Parking payment handled.",
            "schema": {
              "type": "string",
              "example": "Parking payment handled."
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Unauthenticated"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You do not have permission to do that."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "When zone or provider, provided is wrong."
                }
              }
            }
          },
          "422": {
            "description": "Validation errors",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }
        },
        "security": [
          {
            "Bearer": [],
            "xsrf-token": []
          }
        ]
      }
    },
    "/api/parking-reservations/{slug}/parkings/{id}": {
      "put": {
        "tags": [
          "parking"
        ],
        "deprecated": true,
        "summary": "Complete parking payment - Deprecated in order to support single endpoint parking payment.",
        "description": "Update and mark as completed the parking reservation. You should collect the money at this point. **NOTE** *You should collect the money only IF we return a SUCCESS HTTP response*.",
        "operationId": "completeParking",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "description": "The provider `slug`, retrieved in your email.",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The `ID` of the parking reserved, retrieved from the previous request.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "expires",
            "in": "query",
            "description": "Signed URL expiration time",
            "required": true,
            "type": "string"
          },
          {
            "name": "signature",
            "in": "query",
            "description": "Signature URL Signature",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Reservation parking payload",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HoldParkingRQ"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Parking payment handled.",
            "schema": {
              "type": "string",
              "example": "Parking payment handled."
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You do not have permission to do that."
                }
              }
            }
          },
          "422": {
            "description": "Validation errors",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }
        },
        "security": [
          {
            "Bearer": [],
            "xsrf-token": []
          }
        ]
      }
    },
    "/api/parking-zones/all": {
      "get": {
        "tags": [
          "zones"
        ],
        "summary": "Get parking zone list",
        "description": "We need the parking zone list when we make a parking payment in order to also send the zone **code**.\nUse `code` from parking zones when you make a new parking-payment request.",
        "operationId": "getParkingZoneList",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of zones",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ParkingZoneList"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [],
            "xsrf-token": []
          }
        ]
      }
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "name": "Authorization",
      "type": "apiKey",
      "description": "Add `Bearer {token}` to authorize request",
      "in": "header"
    },
    "xsrf-token": {
      "name": "X-XSRF-TOKEN",
      "type": "apiKey",
      "description": "Add `{xsrf-token}` to prevent request from **Cross Site Scripting**",
      "in": "header"
    }
  },
  "definitions": {
    "ParkingZone": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "code": {
          "type": "string"
        }
      }
    },
    "ParkingZoneList": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "code": {
          "type": "string",
          "description": "Zone identifier.",
          "example": "A",
          "enum": [
            "A",
            "B",
            "C",
            "..."
          ]
        },
        "price": {
          "type": "number",
          "format": "double"
        },
        "parking_slots": {
          "type": "integer",
          "format": "int32"
        },
        "opens_at": {
          "type": "string",
          "format": "time"
        },
        "closes_at": {
          "type": "string",
          "format": "time"
        }
      },
      "example": {
        "id": 1,
        "name": "Zona A",
        "code": "A",
        "price": "100.00",
        "parking_slots": 2648,
        "opens_at": "07:30:00",
        "closes_at": "20:00:00"
      }
    },
    "PaymentProvider": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": "external",
          "enum": [
            "internal",
            "external"
          ]
        },
        "method": {
          "type": "string",
          "default": "third_party",
          "enum": [
            "in_app",
            "kiosk",
            "third_party"
          ]
        }
      }
    },
    "LogInRequest": {
      "type": "object",
      "required": [
        "email",
        "password"
      ],
      "properties": {
        "email": {
          "type": "string",
          "format": "email"
        },
        "password": {
          "type": "string",
          "format": "password"
        }
      },
      "example": {
        "email": "provider@provider.com",
        "password": "Test1234"
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "format": "email"
        },
        "phone_number": {
          "type": "string"
        }
      }
    },
    "UserProvider": {
      "allOf": [
        {
          "$ref": "#/definitions/User"
        },
        {
          "type": "object",
          "required": [
            "paymentProvider"
          ],
          "properties": {
            "paymentProvider": {
              "$ref": "#/definitions/PaymentProvider"
            }
          }
        }
      ]
    },
    "Auth": {
      "allOf": [
        {
          "$ref": "#/definitions/UserProvider"
        },
        {
          "type": "object",
          "required": [
            "auth"
          ],
          "properties": {
            "auth": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string"
                },
                "token_type": {
                  "type": "string",
                  "default": "Bearer"
                }
              }
            }
          }
        }
      ]
    },
    "CheckUserRQ": {
      "type": "object",
      "required": [
        "phone_number",
        "email"
      ],
      "properties": {
        "phone_number": {
          "type": "string",
          "example": "+3556XXXXXXXX",
          "description": "The phone number of the client who reserve the parking.\nThe format of phone number should be: **+3556000000**.\n**NOTE** `email` or `phone_number` should be provided at a time, not both. You can leave one of them empty.\nThis is because this might cause problem if a use has 2 different account. 1 connected with email and 1 connected with phone number."
        },
        "email": {
          "type": "string",
          "format": "email",
          "default": null,
          "example": "john@doe.com",
          "description": "The provider can send the client email if they store this information in their end. \n\r**NOTE** `email` or `phone_number` should be provided at a time, not both. You can leave one of them empty. \nThis is because this might cause problem if a use has 2 different account. 1 connected with email and 1 connected with phone number."
        }
      },
      "example": {
        "phone_number": "+3556712345678",
        "email": ""
      }
    },
    "TransferCreditRQ": {
      "allOf": [
        {
          "$ref": "#/definitions/CheckUserRQ"
        },
        {
          "type": "object",
          "required": [
            "credit"
          ],
          "properties": {
            "credit": {
              "type": "integer",
              "minimum": 100,
              "maximum": 30000,
              "example": 500,
              "description": "Credits to be transferred. **NOTE:** `100 credits` = `100 ALL`."
            }
          },
          "example": {
            "phone_number": "+3556712345678",
            "email": "",
            "credit": 100
          }
        }
      ]
    },
    "CreateUserRQ": {
      "type": "object",
      "required": [
        "name",
        "email",
        "phone_number",
        "password",
        "password_confirmation",
        "terms_of_service"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "John Doe",
          "description": "The full name (Name Surname) of the user",
          "minLength": 1,
          "maxLength": 191
        },
        "phone_number": {
          "type": "string",
          "example": "+3556XXXXXXXX",
          "minLength": 1,
          "maxLength": 16,
          "description": "The phone number of the user.\nThe format of phone number should be: **+3556000000**."
        },
        "email": {
          "type": "string",
          "format": "email",
          "minLength": 1,
          "maxLength": 191,
          "default": null,
          "example": "john@doe.com",
          "description": "The email of the user.\nShould be a valid email address."
        },
        "password": {
          "type": "string",
          "format": "password"
        },
        "password_confirmation": {
          "type": "string",
          "format": "password"
        },
        "terms_of_service": {
          "type": "boolean",
          "example": true,
          "description": "The user needs to accept the terms and condition of `NYT` before being registered to the system."
        }
      },
      "example": {
        "name": "John Doe",
        "email": "john@doe.com",
        "phone_number": "+3556712345678",
        "password": "Antonio1234",
        "password_confirmation": "Antonio1234",
        "terms_of_service": true
      }
    },
    "CreateAndTransferCreditRQ": {
      "type": "object",
      "required": [
        "name",
        "email",
        "phone_number",
        "password",
        "password_confirmation",
        "terms_of_service",
        "credit"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "John Doe",
          "description": "The full name (Name Surname) of the user",
          "minLength": 1,
          "maxLength": 191
        },
        "phone_number": {
          "type": "string",
          "example": "+3556XXXXXXXX",
          "minLength": 1,
          "maxLength": 16,
          "description": "The phone number of the user.\nThe format of phone number should be: **+3556000000**."
        },
        "email": {
          "type": "string",
          "format": "email",
          "minLength": 1,
          "maxLength": 191,
          "default": null,
          "example": "john@doe.com",
          "description": "The email of the user.\nShould be a valid email address."
        },
        "password": {
          "type": "string",
          "format": "password"
        },
        "password_confirmation": {
          "type": "string",
          "format": "password"
        },
        "terms_of_service": {
          "type": "boolean",
          "example": true,
          "description": "The user needs to accept the terms and condition of `NYT` before being registered to the system."
        },
        "credit": {
          "type": "integer",
          "format": "int32",
          "minimum": 100,
          "maximum": 30000,
          "example": 500,
          "description": "Credits to be transferred. **NOTE:** `100 credit` = `100` ALL."
        }
      },
      "example": {
        "name": "John Doe",
        "email": "john@doe.com",
        "phone_number": "+3556712345678",
        "password": "Antonio1234",
        "password_confirmation": "Antonio1234",
        "terms_of_service": true,
        "credit": 100
      }
    },
    "NotifyParkingRQ": {
      "type": "object",
      "required": [
        "licence_plate",
        "hours",
        "phone_number",
        "zone",
        "transaction_id"
      ],
      "properties": {
        "zone": {
          "type": "string",
          "minLength": 1,
          "maxLength": 1,
          "default": "A",
          "description": "Zone identifier. If not provided defaults to `A`. \n\r Call `/api/parking-zones/all` to get a list of all available zones.",
          "example": "A",
          "enum": [
            "A",
            "B",
            "C"
          ]
        },
        "licence_plate": {
          "type": "string",
          "minLength": 1,
          "maxLength": 10,
          "example": "AA000BB",
          "description": "The licence plate number which is reserved the parking"
        },
        "phone_number": {
          "type": "string",
          "example": "+3556XXXXXXXX",
          "description": "The phone number of the client who reserve the parking.\n\n The format of phone number should be: **+3556000000**.\n\n **NOTE** `email` or `phone_number` should be provided"
        },
        "email": {
          "type": "string",
          "format": "email",
          "default": null,
          "example": "john@doe.com",
          "description": "The provider can send the client email if they store this information in their end. \n\r **NOTE** `email` or `phone_number` should be provided"
        },
        "hours": {
          "type": "integer",
          "minimum": 1,
          "maximum": 13,
          "example": 1,
          "description": "Hours reserved for this parking spot."
        },
        "transaction_id": {
          "type": "string",
          "default": null,
          "description": "Provide a transaction id to keep the track of the events/operations between your platform and our platform. \n\r The `transaction_id` should be unique.",
          "example": "123-000"
        },
        "from": {
          "type": "string",
          "format": "date-time",
          "default": null,
          "description": "`Optional`: The date and time in `YYYY-mm-dd H:i:s` format, when the parking starts. Should be less then *`to`*.\n If not provided the current timestamp will be considered.\n *This is useful when you are re-trying the creation of a parking payment*.",
          "example": "2023-10-15 14:30:00"
        },
        "to": {
          "type": "string",
          "format": "date-time",
          "default": null,
          "description": "`Optional`: The date and time in `YYYY-mm-dd H:i:s` format, when the parking ends. Should be grater then *`from`*.\n If not provided the current (timestamp + hours) will be considered.\n *This is useful when you are re-trying the creation of a parking payment*.",
          "example": "2023-10-15 15:30:00"
        }
      },
      "example": {
        "licence_plate": "AA000BB",
        "hours": 1,
        "zone": "A",
        "phone_number": "+355690000000",
        "transaction_id": "123-444",
        "from": "2023-10-15 14:30:00",
        "to": "2023-10-15 15:30:00"
      }
    },
    "HoldParkingRQ": {
      "type": "object",
      "required": [
        "licence_plate",
        "hours",
        "phone_number",
        "zone",
        "transaction_id"
      ],
      "properties": {
        "zone": {
          "type": "string",
          "minLength": 1,
          "maxLength": 1,
          "default": "A",
          "description": "Zone identifier.\n You can get the list of all available zones using: `/api/parking-zones/all`.",
          "example": "A",
          "enum": [
            "A",
            "B",
            "C"
          ]
        },
        "licence_plate": {
          "type": "string",
          "description": "The licence plate which is used to reserved the parking."
        },
        "phone_number": {
          "type": "string",
          "description": "The phone number of the client who reserve the parking. \n\n**NOTE**: `email` or `phone_number` should be provided."
        },
        "email": {
          "type": "string",
          "format": "email",
          "default": null,
          "description": "The provider can send the client email if they store this information in their end. \n\r**NOTE**: `email` or `phone_number` should be provided"
        },
        "hours": {
          "type": "integer",
          "minimum": 1,
          "maximum": 13,
          "description": "Hours reserved for this parking spot"
        },
        "transaction_id": {
          "type": "string",
          "default": null,
          "description": "Provide a transaction id to keep the track of the events/operations between your platform and our platform. \n\r It can also be used to retrieve parking payment status. \n\r \\* *This is required and should be `unique` per transaction*.",
          "example": "123-000"
        },
        "from": {
          "type": "string",
          "format": "date-time",
          "default": null,
          "description": "`Optional`: The date and time in `YYYY-mm-dd H:i:s` format, when the parking starts. Should be less then *`to`*.\n If not provided the current timestamp will be considered.\n  *This is useful when you are re-trying the creation of a parking payment*.",
          "example": "2023-10-15 14:30:00"
        },
        "to": {
          "type": "string",
          "format": "date-time",
          "default": null,
          "description": "`Optional`: The date and time in `YYYY-mm-dd H:i:s` format, when the parking ends. Should be grater then *`from`*.\n If not provided the current (timestamp + hours) will be considered.\n *This is useful when you are re-trying the creation of a parking payment*.",
          "example": "2023-10-15 15:30:00"
        }
      },
      "example": {
        "licence_plate": "AA000BB",
        "hours": 1,
        "zone": "A",
        "email": "info@example.com",
        "transaction_id": "123-5555",
        "from": "2023-10-15 14:30:00",
        "to": "2023-10-15 15:30:00"
      }
    },
    "ApiResponse": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "default": "info",
          "enum": [
            "info",
            "warning",
            "danger",
            "success"
          ]
        },
        "title": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "ValidationError": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "errors": {
          "type": "object",
          "properties": {
            "field_name": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    }
  },
  "externalDocs": {
    "description": "For more information please contact us!",
    "url": "https://developer.nytimes.com/"
  }
}
